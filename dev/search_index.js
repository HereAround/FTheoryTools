var documenterSearchIndex = {"docs":
[{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"CurrentModule = FTheoryTools","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"Pages = [\"Tate.md\"]","category":"page"},{"location":"FTheoryTools/TateGeneralBase/#Global-Tate-models-without-specified-base-space","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"","category":"section"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"This method constructs a global Tate model over a base space that is not fully specified. Rather, it assums that a base space exists such that the Tate sections a_i are well-defined so that the Tate model in question is well-defined.","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"For many practical applications, one wishes to assume a further factorization of the Tate sections a_i. This has the advantage that one can engineer singularity loci or even the singularity type over a specific locus. This is the backbone of many F-theory constructions.","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"To this end, this method accepts a polynomial ring whose variables are the sections used in the desired factorization of the Tate sections a_i. For example, if we desired a factorization:","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"a_1 = a_10 w^0,\na_2 = a_21 w^1,\na_3 = a_32 w^2,\na_4 = a_43 w^3,\na_6 = a_65 w^5,","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"then the polynomial ring in question is the ring with indeterminates a_10, a_21, a_32, a_43, a_65 and w.","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"In theory, one can consider these indeterminates as local coordinate of the base space. For the computer implementation, this ring will therefore serve as the coordinate ring of an auxiliary toric base space, namely an affine space with those coordinates.","category":"page"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"For such geometries, we support the following functionality.","category":"page"},{"location":"FTheoryTools/TateGeneralBase/#Constructors","page":"Global Tate models without specified base space","title":"Constructors","text":"","category":"section"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"GlobalTateModel(ais::Vector{fmpq_mpoly}, auxiliary_base_ring::MPolyRing)","category":"page"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.GlobalTateModel-Tuple{Vector{fmpq_mpoly}, MPolyRing}","page":"Global Tate models without specified base space","title":"FTheoryTools.GlobalTateModel","text":"GlobalTateModel(ais::Vector{fmpq_mpoly}, auxiliary_base_ring::MPolyRing)\n\nThis method constructs a global Tate model over a base space that is not fully specified. The following example exemplifies this approach.\n\nExamples\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_polynomial(t)\na10*x*y*z + a21*w*x^2*z^2 + a32*w^2*y*z^3 + a43*w^3*x*z^4 + a65*w^5*z^6 + x^3 - y^2\n\njulia> auxiliary_base_space(t)\nA normal, affine, 6-dimensional toric variety\n\njulia> auxiliary_ambient_space(t)\nA normal toric variety\n\njulia> dim(auxiliary_ambient_space(t))\n8\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#Attributes","page":"Global Tate models without specified base space","title":"Attributes","text":"","category":"section"},{"location":"FTheoryTools/TateGeneralBase/","page":"Global Tate models without specified base space","title":"Global Tate models without specified base space","text":"tate_section_a1(t::TateModelOverGeneralBaseSpace)\ntate_section_a2(t::TateModelOverGeneralBaseSpace)\ntate_section_a3(t::TateModelOverGeneralBaseSpace)\ntate_section_a4(t::TateModelOverGeneralBaseSpace)\ntate_section_a6(t::TateModelOverGeneralBaseSpace)\ntate_polynomial(t::TateModelOverGeneralBaseSpace)\nauxiliary_base_space(t::TateModelOverGeneralBaseSpace)\nauxiliary_ambient_space(t::TateModelOverGeneralBaseSpace)","category":"page"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.tate_section_a1-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.tate_section_a1","text":"tate_section_a1(t::TateModelOverGeneralBaseSpace)\n\nReturn the Tate section a_1.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_section_a1(t)\na10\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.tate_section_a2-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.tate_section_a2","text":"tate_section_a2(t::TateModelOverGeneralBaseSpace)\n\nReturn the Tate section a_2.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_section_a2(t)\na21*w\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.tate_section_a3-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.tate_section_a3","text":"tate_section_a3(t::TateModelOverGeneralBaseSpace)\n\nReturn the Tate section a_3.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_section_a3(t)\na32*w^2\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.tate_section_a4-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.tate_section_a4","text":"a4(t::TateModelOverGeneralBaseSpace)\n\nReturn the Tate section a_4.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_section_a4(t)\na43*w^3\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.tate_section_a6-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.tate_section_a6","text":"tate_section_a6(t::TateModelOverGeneralBaseSpace)\n\nReturn the Tate section a_6.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_section_a6(t)\na65*w^5\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.tate_polynomial-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.tate_polynomial","text":"tate_polynomial(t::TateModelOverGeneralBaseSpace)\n\nReturn the Tate polynomial of the global Tate model.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> tate_polynomial(t)\na10*x*y*z + a21*w*x^2*z^2 + a32*w^2*y*z^3 + a43*w^3*x*z^4 + a65*w^5*z^6 + x^3 - y^2\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.auxiliary_base_space-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.auxiliary_base_space","text":"auxiliary_base_space(t::TateModelOverGeneralBaseSpace)\n\nReturn the toric base space of the global Tate model.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> auxiliary_base_space(t)\nA normal, affine, 6-dimensional toric variety\n\n\n\n","category":"method"},{"location":"FTheoryTools/TateGeneralBase/#FTheoryTools.auxiliary_ambient_space-Tuple{TateModelOverGeneralBaseSpace}","page":"Global Tate models without specified base space","title":"FTheoryTools.auxiliary_ambient_space","text":"auxiliary_ambient_space(t::TateModelOverGeneralBaseSpace)\n\nReturn the toric ambient space of the global Tate model.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (a10,a21,a32,a43,a65,w) = QQ[\"a10\", \"a21\", \"a32\", \"a43\", \"a65\", \"w\"];\n\njulia> a1 = a10;\n\njulia> a2 = a21 * w;\n\njulia> a3 = a32 * w^2;\n\njulia> a4 = a43 * w^3;\n\njulia> a6 = a65 * w^5;\n\njulia> ais = [a1, a2, a3, a4, a6];\n\njulia> t = GlobalTateModel(ais, auxiliary_base_ring)\nA global Tate model over a not fully specified base\n\njulia> auxiliary_ambient_space(t)\nA normal toric variety\n\njulia> dim(auxiliary_ambient_space(t))\n8\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"CurrentModule = FTheoryTools","category":"page"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"Pages = [\"Weierstrass.md\"]","category":"page"},{"location":"FTheoryTools/Weierstrass/#Global-Weierstrass-models","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"","category":"section"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"A global Weierstrass model describes a particular form of an elliptic fibration. We focus on elliptic fibrations over base 3-folds B3. Consider the weighted projective space mathbbP^231 with coordinates x y z. In addition, consider","category":"page"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"f in H^0( B_3 overlineK_B_3^otimes 4 ),\ng in H^0( B_3 overlineK_B_3^otimes 6 ),","category":"page"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"Then form a mathbbP^231-bundle over B3 such that","category":"page"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"x transforms as a section of 2 overlineK_B_3,\ny transforms as a section of 3 overlineK_B_3,\nz transforms as a section of 0 overlineK_B_3 = mathcalO_B_3.","category":"page"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"In this 5-fold ambient space, a global Weierstrass model is the hypersurface defined by the vanishing of the Weierstrass polynomial P_W = x^3 - y^2 + f x z^4 + g z^6. For such geometries, we support functionality.","category":"page"},{"location":"FTheoryTools/Weierstrass/#Constructors","page":"Global Weierstrass models","title":"Constructors","text":"","category":"section"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"We support the following constructors:","category":"page"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"GenericGlobalWeierstrassModel(base::Oscar.AbstractNormalToricVariety)\nGenericGlobalWeierstrassModelOverProjectiveSpace()\nSpecificGlobalWeierstrassModel(f::MPolyElem_dec{fmpq, fmpq_mpoly}, g::MPolyElem_dec{fmpq, fmpq_mpoly}, base::Oscar.AbstractNormalToricVariety)","category":"page"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.GenericGlobalWeierstrassModel-Tuple{Oscar.AbstractNormalToricVariety}","page":"Global Weierstrass models","title":"FTheoryTools.GenericGlobalWeierstrassModel","text":"GenericGlobalWeierstrassModel(base::Oscar.AbstractNormalToricVariety)\n\nThis method constructs a global Weierstrass model over a given toric base 3-fold. The Weierstrass sections f and g are taken with (pseudo) random coefficients.\n\nOne way to achieve this is to first focus on the Cox ring of the toric ambient space. This ring must be graded such that the Weierstrass polynomial is homogeneous and cuts out a Calabi-Yau hypersurface. Given this grading, one can perform a triangulation. This triangulation will typically take a long time to complete and yield a large number of candidate ambient spaces. Typically, one wishes to focus on those spaces which contain the toric base space in a manifest way. But even this criterion usually allows for many ambient spaces to be used.\n\nTo circumvent this obstacle, this method operates in the opposite direction, i.e. \"bottom-up\". That is, it begins by extracting the rays and maximal cones of the chosen toric base space. Subsequently, those rays and cones are extended to form one of the many toric ambient spaces. The following example demonstrates that the so-obtained ambient space of a (singular) global Weierstrass model need not be smooth.\n\nExamples\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> is_smooth(toric_ambient_space(w))\nfalse\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.GenericGlobalWeierstrassModelOverProjectiveSpace-Tuple{}","page":"Global Weierstrass models","title":"FTheoryTools.GenericGlobalWeierstrassModelOverProjectiveSpace","text":"GenericGlobalWeierstrassModelOverProjectiveSpace()\n\nThis method constructs a global Weierstrass model over the 3-dimensional projective space.\n\nExamples\n\njulia> using Oscar\n\njulia> GenericGlobalWeierstrassModelOverProjectiveSpace()\nA global Weierstrass model over a concrete base\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.SpecificGlobalWeierstrassModel-Tuple{MPolyElem_dec{fmpq, fmpq_mpoly}, MPolyElem_dec{fmpq, fmpq_mpoly}, Oscar.AbstractNormalToricVariety}","page":"Global Weierstrass models","title":"FTheoryTools.SpecificGlobalWeierstrassModel","text":"SpecificGlobalWeierstrassModel(f::MPolyElem_dec{fmpq, fmpq_mpoly}, g::MPolyElem_dec{fmpq, fmpq_mpoly}, base::Oscar.AbstractNormalToricVariety)\n\nThis method operates analogously to GenericGlobalWeierstrassModel(base::Oscar.AbstractNormalToricVariety). The only difference is that the Weierstrass sections f and g can be specified with non-generic values.\n\nExamples\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> f = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base)^4)]);\n\njulia> g = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base)^6)]);\n\njulia> w = SpecificGlobalWeierstrassModel(f, g, base)\nA global Weierstrass model over a concrete base\n\njulia> is_smooth(toric_ambient_space(w))\nfalse\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#Attributes","page":"Global Weierstrass models","title":"Attributes","text":"","category":"section"},{"location":"FTheoryTools/Weierstrass/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"weierstrass_section_f(w::GlobalWeierstrassModel)\nweierstrass_section_g(w::GlobalWeierstrassModel)\nweierstrass_polynomial(w::GlobalWeierstrassModel)\nOscar.:discriminant(w::GlobalWeierstrassModel)\ntoric_base_space(w::GlobalWeierstrassModel)\ntoric_ambient_space(w::GlobalWeierstrassModel)","category":"page"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.weierstrass_section_f-Tuple{GlobalWeierstrassModel}","page":"Global Weierstrass models","title":"FTheoryTools.weierstrass_section_f","text":"weierstrass_section_f(w::GlobalWeierstrassModel)\n\nReturn the polynomial f used for the construction of the global Weierstrass model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> weierstrass_section_f(w);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.weierstrass_section_g-Tuple{GlobalWeierstrassModel}","page":"Global Weierstrass models","title":"FTheoryTools.weierstrass_section_g","text":"weierstrass_section_g(w::GlobalWeierstrassModel)\n\nReturn the polynomial g used for the construction of the global Weierstrass model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> weierstrass_section_g(w);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.weierstrass_polynomial-Tuple{GlobalWeierstrassModel}","page":"Global Weierstrass models","title":"FTheoryTools.weierstrass_polynomial","text":"weierstrass_polynomial(w::GlobalWeierstrassModel)\n\nReturn the Weierstrass polynomial of the global Weierstrass model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> weierstrass_polynomial(w);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#AbstractAlgebra.discriminant-Tuple{GlobalWeierstrassModel}","page":"Global Weierstrass models","title":"AbstractAlgebra.discriminant","text":"discriminant(w::GlobalWeierstrassModel)\n\nReturn the discriminant Delta = 4 f^3 + 27 g^2.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> discriminant(w);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.toric_base_space-Tuple{GlobalWeierstrassModel}","page":"Global Weierstrass models","title":"FTheoryTools.toric_base_space","text":"toric_base_space(w::GlobalWeierstrassModel)\n\nReturn the toric base space of the global Weierstrass model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> is_smooth(toric_base_space(w))\ntrue\n\n\n\n","category":"method"},{"location":"FTheoryTools/Weierstrass/#FTheoryTools.toric_ambient_space-Tuple{GlobalWeierstrassModel}","page":"Global Weierstrass models","title":"FTheoryTools.toric_ambient_space","text":"toric_ambient_space(w::GlobalWeierstrassModel)\n\nReturn the toric base space of the global Weierstrass model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> w = GenericGlobalWeierstrassModel(base)\nA global Weierstrass model over a concrete base\n\njulia> is_smooth(toric_ambient_space(w))\nfalse\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"CurrentModule = FTheoryTools","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"Pages = [\"Weierstrass.md\"]","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/#Global-Weierstrass-models","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"","category":"section"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"This method constructs a global Weierstrass model over a base space that is not fully specified. Rather, it assums that a base space exists such that the Weierstrass sections f and g are well-defined, so that the Weierstrass model in question is well-defined.","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"For many practical applications, one wishes to assume a further specialize the Weierstrass sections f and g. This has the advantage that one can engineer singularity loci or even the singularity type over a specific locus. To some extend, this is the backbone of many F-theory constructions.","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"Consequently, the construction of such models accepts a polynomial ring whose variables are the sections used in the desired factorization of the Weierstrass sections f and g.","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"In theory, one can consider the indeterminates of this auxiliary ring as a (possilby redundant) set of local coordinate of the base space. For the computer implementation, this ring will therefore serve as the coordinate ring of an auxiliary toric base space, namely an affine space with those coordinates.","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"For such geometries, we support the following functionality.","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/#Constructors","page":"Global Weierstrass models","title":"Constructors","text":"","category":"section"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"We support the following constructors:","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"GlobalWeierstrassModel(f::fmpq_mpoly, g::fmpq_mpoly, auxiliary_base_ring::MPolyRing)","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/#FTheoryTools.GlobalWeierstrassModel-Tuple{fmpq_mpoly, fmpq_mpoly, MPolyRing}","page":"Global Weierstrass models","title":"FTheoryTools.GlobalWeierstrassModel","text":"GlobalWeierstrassModel(f::fmpq_mpoly, g::fmpq_mpoly, auxiliary_base_ring::MPolyRing)\n\nThis method constructs a global Weierstrass model over a base space that is not fully specified. The following example illustrates this approach.\n\nExamples\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> weierstrass_polynomial(w)\nf*x*z^4 + g*z^6 + x^3 - y^2\n\njulia> auxiliary_base_space(w)\nA normal, affine, 2-dimensional toric variety\n\njulia> auxiliary_ambient_space(w)\nA normal toric variety\n\njulia> dim(auxiliary_ambient_space(w))\n4\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/#Attributes","page":"Global Weierstrass models","title":"Attributes","text":"","category":"section"},{"location":"FTheoryTools/WeierstrassGeneralBase/","page":"Global Weierstrass models","title":"Global Weierstrass models","text":"weierstrass_section_f(w::WeierstrassModelOverGeneralBaseSpace)\nweierstrass_section_g(w::WeierstrassModelOverGeneralBaseSpace)\nweierstrass_polynomial(w::WeierstrassModelOverGeneralBaseSpace)\nOscar.:discriminant(w::WeierstrassModelOverGeneralBaseSpace)\nauxiliary_base_space(w::WeierstrassModelOverGeneralBaseSpace)\nauxiliary_ambient_space(w::WeierstrassModelOverGeneralBaseSpace)","category":"page"},{"location":"FTheoryTools/WeierstrassGeneralBase/#FTheoryTools.weierstrass_section_f-Tuple{WeierstrassModelOverGeneralBaseSpace}","page":"Global Weierstrass models","title":"FTheoryTools.weierstrass_section_f","text":"weierstrass_section_f(w::WeierstrassModelOverGeneralBaseSpace)\n\nReturn the Weierstrass section f.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> weierstrass_section_f(w)\nf\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/#FTheoryTools.weierstrass_section_g-Tuple{WeierstrassModelOverGeneralBaseSpace}","page":"Global Weierstrass models","title":"FTheoryTools.weierstrass_section_g","text":"weierstrass_section_g(w::WeierstrassModelOverGeneralBaseSpace)\n\nReturn the Weierstrass section g.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> weierstrass_section_g(w)\ng\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/#FTheoryTools.weierstrass_polynomial-Tuple{WeierstrassModelOverGeneralBaseSpace}","page":"Global Weierstrass models","title":"FTheoryTools.weierstrass_polynomial","text":"weierstrass_polynomial(w::WeierstrassModelOverGeneralBaseSpace)\n\nReturn the Weierstrass polynomial.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> weierstrass_polynomial(w)\nf*x*z^4 + g*z^6 + x^3 - y^2\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/#AbstractAlgebra.discriminant-Tuple{WeierstrassModelOverGeneralBaseSpace}","page":"Global Weierstrass models","title":"AbstractAlgebra.discriminant","text":"discriminant(w::WeierstrassModelOverGeneralBaseSpace)\n\nReturn the discriminant Delta = 4 f^3 + 27 g^2.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> discriminant(w);\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/#FTheoryTools.auxiliary_base_space-Tuple{WeierstrassModelOverGeneralBaseSpace}","page":"Global Weierstrass models","title":"FTheoryTools.auxiliary_base_space","text":"auxiliary_base_space(w::WeierstrassModelOverGeneralBaseSpace)\n\nReturn the toric base space of the global Tate model.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> auxiliary_base_space(w)\nA normal, affine, 2-dimensional toric variety\n\n\n\n","category":"method"},{"location":"FTheoryTools/WeierstrassGeneralBase/#FTheoryTools.auxiliary_ambient_space-Tuple{WeierstrassModelOverGeneralBaseSpace}","page":"Global Weierstrass models","title":"FTheoryTools.auxiliary_ambient_space","text":"auxiliary_ambient_space(w::WeierstrassModelOverGeneralBaseSpace)\n\nReturn the toric ambient space of the global Tate model.\n\njulia> using Oscar\n\njulia> auxiliary_base_ring, (f, g) = QQ[\"f\", \"g\"];\n\njulia> w = GlobalWeierstrassModel(f, g, auxiliary_base_ring)\nA global Weierstrass model over a not fully specified base\n\njulia> auxiliary_ambient_space(w)\nA normal toric variety\n\n\n\n","category":"method"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"CurrentModule = FTheoryTools","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Pages = [\"Introduction.md\"]","category":"page"},{"location":"FTheoryTools/Introduction/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"FTheoryTools/Introduction/#Goal","page":"Overview","title":"Goal","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"The package FTheoryTools.jl aims to automate a number of recuring and (at least in part) tedious computations in F-theory model building. Specifically we focus on the following setups:","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"4d F-theory compactifications,\ndefined by a global and singular Weierstrass model as codimension 1 locus of a toric ambient space Y,\nwhich can be crepantly resolved.","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"For possible future extensions, see below.","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"We aim for the following workflow:","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"User input:\nWeierstrass polynomial P_W,\nData defining the toric ambient space Y (if applicable),\nChoice of resolved phase (if applicable),\nGenerating sections (for U(1) symmetries).\nOutput:\nSingular loci in codimension 1, 2 and 3.\nDefining data of resolved geometry.\n(Pictures of) fibre diagrams of resolved fibre over the originally singular loci, including intersections of U(1)-sections.\nGauge group.\nTopological data (e.g. Euler number).","category":"page"},{"location":"FTheoryTools/Introduction/#Status","page":"Overview","title":"Status","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"This project just began. We hope to have a first working version by the end of the year 2022.","category":"page"},{"location":"FTheoryTools/Introduction/#Possible-future-extensions","page":"Overview","title":"Possible future extensions","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Future extensions include, but are not necessarily limited to, the following:","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Specify a G_4-flux and work-out the chiral spectra.\nSpecify a gauge potential and work out (candidates for) the line bundles whose cohomologies encode the vector-like spectra.\nOther singularity types (non-minimal, terminal, etc.)\nBase blowups for singularity resolution.","category":"page"},{"location":"FTheoryTools/Introduction/#Dependencies","page":"Overview","title":"Dependencies","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"We base this project on OSCAR for general functionality on toric spaces and (possibly even more importantly) polynomial operations. The latter are based on Singular and Singular.jl, respectively.","category":"page"},{"location":"FTheoryTools/Introduction/#Installation-instructions-for-Linux","page":"Overview","title":"Installation instructions for Linux","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Install Julia on your computer. The latest version can be found here.\nDownload this development version of FTheoryTools.jl. Those interested in contributing should instead clone this repository:","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"    git clone https://github.com/Julia-meets-String-Theory/FTheoryTools.jl.git","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Place your clone/download in a location outside of the .julia folder of your home folder.\nFinally, register and build FTheoryTools.jl as follows:","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"    using Pkg\n    Pkg.add(\"Oscar\")\n    Pkg.develop(path=\"path/to/your/FTheoryTools.jl\")\n    Pkg.build(\"FTheoryTools\")","category":"page"},{"location":"FTheoryTools/Introduction/#Documentation","page":"Overview","title":"Documentation","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"For detailed information about the implemented functionality, please take a look at the most recent documentation.","category":"page"},{"location":"FTheoryTools/Introduction/#Bugs-and-feature-requests","page":"Overview","title":"Bugs and feature requests","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"If you want to report a bug or request a feature, please do it by raising a github issue.","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"FTheoryTools.version","category":"page"},{"location":"FTheoryTools/Introduction/#FTheoryTools.version","page":"Overview","title":"FTheoryTools.version","text":"version\n\nThe version number of the loaded FTheoryTools. Please mention this number in any bug report.\n\n\n\n\n\n","category":"constant"},{"location":"FTheoryTools/Introduction/#Contributions","page":"Overview","title":"Contributions","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Contributions are highly appreciated. Please notice that:","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Contributions must be done by opening a pull request.\nPull requests must pass a number of checks that are automatically conducted by our test suite, before they can be merged. A further approval by a code owner is appreciated.\nCode is expected to be in agreement with the Oscar style guide.","category":"page"},{"location":"FTheoryTools/Introduction/#Contact","page":"Overview","title":"Contact","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"This software is work in progress of","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"Martin Bies,\nAndrew Turner.","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"If you are interested in contributing, please feel free to reach out to us for more details.","category":"page"},{"location":"FTheoryTools/Introduction/#Funding","page":"Overview","title":"Funding","text":"","category":"section"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"The work of Martin Bies is supported by SFB-TRR 195 Symbolic Tools in Mathematics and their Application of the German Research Foundation (DFG).","category":"page"},{"location":"FTheoryTools/Introduction/","page":"Overview","title":"Overview","text":"The work of Andrew Turner is supported by DOE (HEP) Award DE-SC001352.","category":"page"},{"location":"#Welcome-to-FTheoryTools","page":"Welcome to FTheoryTools","title":"Welcome to FTheoryTools","text":"","category":"section"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"CurrentModule = FTheoryTools","category":"page"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"Pages = [\"Tate.md\"]","category":"page"},{"location":"FTheoryTools/Tate/#Global-Tate-models","page":"Global Tate models","title":"Global Tate models","text":"","category":"section"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"A global Tate model describes a particular form of an elliptic fibration. We focus on elliptic fibrations over base 3-folds B3. Consider the weighted projective space mathbbP^231 with coordinates x y z. In addition, consider","category":"page"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"a_1 in H^0( B_3 overlineK_B_3 ),\na_2 in H^0( B_3 overlineK_B_3^otimes 2 ),\na_3 in H^0( B_3 overlineK_B_3^otimes 3 ),\na_4 in H^0( B_3 overlineK_B_3^otimes 4 ),\na_6 in H^0( B_3 overlineK_B_3^otimes 6 ).","category":"page"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"Then form a mathbbP^231-bundle over B3 such that","category":"page"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"x transforms as a section of 2 overlineK_B_3,\ny transforms as a section of 3 overlineK_B_3,\nz transforms as a section of 0 overlineK_B_3 = mathcalO_B_3.","category":"page"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"In this 5-fold ambient space, a global Tate model is the hypersurface defined by the vanishing of the Tate polynomial P_T = x^3 - y^2 - x y z a_1 + x^2 z^2 a_2 - y z^3 a_3 + x z^4 a_4 + z^6 a_6. For such geometries, we support functionality.","category":"page"},{"location":"FTheoryTools/Tate/#Constructors","page":"Global Tate models","title":"Constructors","text":"","category":"section"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"GenericGlobalTateModel(base::Oscar.AbstractNormalToricVariety)\nGenericGlobalTateModelOverProjectiveSpace()\nSpecificGlobalTateModel(ais::Vector{MPolyElem_dec{fmpq, fmpq_mpoly}}, base::Oscar.AbstractNormalToricVariety)","category":"page"},{"location":"FTheoryTools/Tate/#FTheoryTools.GenericGlobalTateModel-Tuple{Oscar.AbstractNormalToricVariety}","page":"Global Tate models","title":"FTheoryTools.GenericGlobalTateModel","text":"GenericGlobalTateModel(base::Oscar.AbstractNormalToricVariety)\n\nThis method constructs a global Tate model over a given toric base 3-fold. The Tate sections a_i are taken with (pseudo) random coefficients.\n\nOne way to achieve this is to first focus on the Cox ring of the toric ambient space. This ring must be graded such that the Tate polynomial is homogeneous and cuts out a Calabi-Yau hypersurface. Given this grading, one can perform a triangulation. This triangulation will typically take a long time to complete and yield a large number of candidate ambient spaces. Typically, one wishes to focus on those spaces which contain the base toric space in a manifest way. But even this criterion usually allows for many ambient spaces.\n\nThis method here operates in the opposite way. It begins by extracting the rays and maximal cones of the base space. Subsequently, those rays and cones are extended to form one of the many toric 5-fold ambient spaces. The following example demonstrates that this ambient space of a (singular) global Tate model need not be smooth.\n\nExamples\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> is_smooth(toric_ambient_space(t))\nfalse\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.GenericGlobalTateModelOverProjectiveSpace-Tuple{}","page":"Global Tate models","title":"FTheoryTools.GenericGlobalTateModelOverProjectiveSpace","text":"GenericGlobalTateModelOverProjectiveSpace()\n\nThis method constructs a global Tate model over the 3-dimensional projective space.\n\nExamples\n\njulia> using Oscar\n\njulia> GenericGlobalTateModelOverProjectiveSpace()\nA global Tate model over a concrete base\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.SpecificGlobalTateModel-Tuple{Vector{MPolyElem_dec{fmpq, fmpq_mpoly}}, Oscar.AbstractNormalToricVariety}","page":"Global Tate models","title":"FTheoryTools.SpecificGlobalTateModel","text":"SpecificGlobalTateModel(ais::Vector{MPolyElem_dec{fmpq, fmpq_mpoly}}, base::Oscar.AbstractNormalToricVariety)\n\nThis method operates analogously to GenericGlobalTateModel(base::Oscar.AbstractNormalToricVariety). The only difference is that the Tate sections a_i can be specified with non-generic values.\n\nExamples\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> a1 = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base))]);\n\njulia> a2 = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base)^2)]);\n\njulia> a3 = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base)^3)]);\n\njulia> a4 = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base)^4)]);\n\njulia> a6 = sum([rand(Int) * b for b in basis_of_global_sections(anticanonical_bundle(base)^6)]);\n\njulia> t = SpecificGlobalTateModel([a1, a2, a3, a4, a6], base)\nA global Tate model over a concrete base\n\njulia> is_smooth(toric_ambient_space(t))\nfalse\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#Attributes","page":"Global Tate models","title":"Attributes","text":"","category":"section"},{"location":"FTheoryTools/Tate/","page":"Global Tate models","title":"Global Tate models","text":"tate_section_a1(t::GlobalTateModel)\ntate_section_a2(t::GlobalTateModel)\ntate_section_a3(t::GlobalTateModel)\ntate_section_a4(t::GlobalTateModel)\ntate_section_a6(t::GlobalTateModel)\ntate_polynomial(t::GlobalTateModel)\ntoric_base_space(t::GlobalTateModel)\ntoric_ambient_space(t::GlobalTateModel)","category":"page"},{"location":"FTheoryTools/Tate/#FTheoryTools.tate_section_a1-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.tate_section_a1","text":"tate_section_a1(t::GlobalTateModel)\n\nReturn the Tate section a_1.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> tate_section_a1(t);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.tate_section_a2-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.tate_section_a2","text":"tate_section_a2(t::GlobalTateModel)\n\nReturn the Tate section a_2.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> tate_section_a2(t);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.tate_section_a3-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.tate_section_a3","text":"tate_section_a3(t::GlobalTateModel)\n\nReturn the Tate section a_3.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> tate_section_a3(t);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.tate_section_a4-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.tate_section_a4","text":"tate_section_a4(t::GlobalTateModel)\n\nReturn the Tate section a_4.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> tate_section_a4(t);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.tate_section_a6-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.tate_section_a6","text":"tate_section_a6(t::GlobalTateModel)\n\nReturn the Tate section a_6.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> tate_section_a6(t);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.tate_polynomial-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.tate_polynomial","text":"tate_polynomial(t::GlobalTateModel)\n\nReturn the Tate polynomial of the global Tate model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> tate_polynomial(t);\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.toric_base_space-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.toric_base_space","text":"toric_base_space(t::GlobalTateModel)\n\nReturn the toric base space of the global Tate model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> toric_base_space(t)\nA normal, 3-dimensional toric variety without torusfactor\n\n\n\n","category":"method"},{"location":"FTheoryTools/Tate/#FTheoryTools.toric_ambient_space-Tuple{GlobalTateModel}","page":"Global Tate models","title":"FTheoryTools.toric_ambient_space","text":"toric_ambient_space(t::GlobalTateModel)\n\nReturn the toric ambient space of the global Tate model.\n\njulia> using Oscar\n\njulia> test_space = hirzebruch_surface(2) * projective_space(NormalToricVariety,1)\nA normal toric variety\n\njulia> test_space1 = blowup_on_ith_minimal_torus_orbit(test_space,1,\"e1\")\nA normal toric variety\n\njulia> test_space2 = blowup_on_ith_minimal_torus_orbit(test_space1,1,\"e2\")\nA normal toric variety\n\njulia> base = blowup_on_ith_minimal_torus_orbit(test_space2,1,\"e3\")\nA normal toric variety\n\njulia> t = GenericGlobalTateModel(base)\nA global Tate model over a concrete base\n\njulia> toric_ambient_space(t)\nA normal toric variety\n\njulia> is_smooth(toric_ambient_space(t))\nfalse\n\n\n\n","category":"method"}]
}
